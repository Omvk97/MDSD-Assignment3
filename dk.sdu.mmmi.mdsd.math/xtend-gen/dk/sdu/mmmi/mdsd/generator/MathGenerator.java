/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.ExternalMethod;
import dk.sdu.mmmi.mdsd.math.ExternalMethodCall;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.Program;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = Iterators.<Program>filter(resource.getAllContents(), Program.class).next();
    MathGenerator.generateProgram(program, fsa);
  }
  
  public static void generateProgram(final Program program, final IFileSystemAccess2 fsa) {
    String _name = program.getName();
    String _plus = ("math_expression/" + _name);
    String fileName = (_plus + ".java");
    String fileContents = MathGenerator.generateFileContents(program);
    fsa.generateFile(fileName, fileContents);
  }
  
  public static String generateFileContents(final Program program) {
    String className = program.getName();
    int _size = program.getExternalMethods().size();
    boolean externalMethodsHaveBeenDefined = (_size != 0);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<VarBinding> _variables = program.getMath().getVariables();
      for(final VarBinding variable : _variables) {
        _builder.append("\t");
        _builder.append("public int ");
        String _name = variable.getName();
        _builder.append(_name, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (externalMethodsHaveBeenDefined) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private External external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        _builder.append(className, "\t");
        _builder.append("(External external) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.external = external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      EList<VarBinding> _variables_1 = program.getMath().getVariables();
      for(final VarBinding variable_1 : _variables_1) {
        _builder.append("\t\t");
        _builder.append("this.");
        String _name_1 = variable_1.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(" = ");
        String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(variable_1.getExpression());
        _builder.append(_javaCompileRepresentation, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      if (externalMethodsHaveBeenDefined) {
        _builder.append("\t");
        _builder.append("// External Method Interfaces");
        _builder.newLine();
        _builder.append("\t");
        String _generateExternalMethodInterfaces = MathGenerator.generateExternalMethodInterfaces(program);
        _builder.append(_generateExternalMethodInterfaces, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String javaCompileRepresentation(final Expression expression) {
    String _switchResult = null;
    boolean _matched = false;
    if (expression instanceof MathNumber) {
      _matched=true;
      _switchResult = Integer.valueOf(((MathNumber)expression).getValue()).toString();
    }
    if (!_matched) {
      if (expression instanceof Plus) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(((Plus)expression).getLeft());
        _builder.append(_javaCompileRepresentation);
        _builder.append(" + ");
        String _javaCompileRepresentation_1 = MathGenerator.javaCompileRepresentation(((Plus)expression).getRight());
        _builder.append(_javaCompileRepresentation_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expression instanceof Minus) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(((Minus)expression).getLeft());
        _builder.append(_javaCompileRepresentation);
        _builder.append(" - ");
        String _javaCompileRepresentation_1 = MathGenerator.javaCompileRepresentation(((Minus)expression).getRight());
        _builder.append(_javaCompileRepresentation_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expression instanceof Mult) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(((Mult)expression).getLeft());
        _builder.append(_javaCompileRepresentation);
        _builder.append(" * ");
        String _javaCompileRepresentation_1 = MathGenerator.javaCompileRepresentation(((Mult)expression).getRight());
        _builder.append(_javaCompileRepresentation_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expression instanceof Div) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(((Div)expression).getLeft());
        _builder.append(_javaCompileRepresentation);
        _builder.append(" / ");
        String _javaCompileRepresentation_1 = MathGenerator.javaCompileRepresentation(((Div)expression).getRight());
        _builder.append(_javaCompileRepresentation_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expression instanceof Parenthesis) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(((Parenthesis)expression).getExpression());
        _builder.append(_javaCompileRepresentation);
        _builder.append(")");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expression instanceof LetBinding) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(((LetBinding)expression).getBody());
        _builder.append(_javaCompileRepresentation);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (expression instanceof VariableUse) {
        _matched=true;
        Binding ref = ((VariableUse)expression).getRef();
        if ((ref instanceof LetBinding)) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("(");
          String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(((LetBinding)ref).getBinding());
          _builder.append(_javaCompileRepresentation);
          _builder.append(")");
          return _builder.toString();
        }
        return ref.getName();
      }
    }
    if (!_matched) {
      if (expression instanceof ExternalMethodCall) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("this.external.");
        String _name = ((ExternalMethodCall)expression).getMethod().getName();
        _builder.append(_name);
        _builder.append("(");
        {
          EList<Expression> _arguments = ((ExternalMethodCall)expression).getArguments();
          boolean _hasElements = false;
          for(final Expression argument : _arguments) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _javaCompileRepresentation = MathGenerator.javaCompileRepresentation(argument);
            _builder.append(_javaCompileRepresentation);
          }
        }
        _builder.append(")");
        _switchResult = _builder.toString();
      }
    }
    return _switchResult;
  }
  
  public static String generateExternalMethodInterfaces(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public interface External {");
    _builder.newLine();
    {
      EList<ExternalMethod> _externalMethods = program.getExternalMethods();
      for(final ExternalMethod exMethod : _externalMethods) {
        _builder.append("\t");
        _builder.append("public int ");
        String _name = exMethod.getName();
        _builder.append(_name, "\t");
        _builder.append("(");
        String _generateExternalInterfaceParameters = MathGenerator.generateExternalInterfaceParameters(exMethod);
        _builder.append(_generateExternalInterfaceParameters, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String generateExternalInterfaceParameters(final ExternalMethod externalMethod) {
    int counter = 0;
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _types = externalMethod.getTypes();
      boolean _hasElements = false;
      for(final String type : _types) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        _builder.append(type);
        _builder.append(" ");
        String _name = externalMethod.getName();
        _builder.append(_name);
        String _firstUpper = StringExtensions.toFirstUpper(type);
        _builder.append(_firstUpper);
        int _plusPlus = counter++;
        _builder.append(_plusPlus);
      }
    }
    return _builder.toString();
  }
}
